# Reference: https://docs.aws.amazon.com/quickstart/latest/active-directory-ds/welcome.html
---
Description: Provision Active Directory Domain Services in an EC2 instance with a client VPC
Parameters:
  ClientMnemonic:
    Description: Client Mnemonic
    Type: String
  EnvironmentId:
    Description: Environment Identifier
    Type: String
    AllowedValues:
      - DEV
      - QA
      - NONPROD
      - PROD
  InstanceType:
    Description: EC2 Instance Type
    Type: String
    Default: t2.large
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.large
    ConstraintDescription: Must be a valid EC2 instance type
  VpcCidr:
    Description: ''
    Type: String
    Default: 192.168.0.0/16
  PrivateSubnetCidr:
    Description: ''
    Type: String
    Default: 192.168.1.0/24
  PublicSubnetCidr:
    Description: ''
    Type: String
    Default: 192.168.2.0/24
  KeyPair:
    Description: Name of an existing EC2 key pair
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of the an existing EC2 Key Pair
    Default: ec2-keypair
  RestoreModePassword:
    Description: Password for a separate Administrator account when the domain controller is in Restore Mode. Must be at least 8 characters containing letters, numbers and symbols
    Type: String
    MinLength: 8
    MaxLength: 32
    AllowedPattern: (?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    NoEcho: true
  AMIImageId:
    Description: Windows AMI Image ID
    Type: String
    Default: ami-027930fde2107b8f2
  DomainAdminUsername:
    Description: Username for Domain Administrator Account
    Type: String
    Default: ec2-ad-admin
  DomainAdminPassword:
    Description: Password for Domain Administrator Account
    Type: String
    MinLength: 8
    MaxLength: 32
    AllowedPattern: (?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    NoEcho: true
Resources:
  ClientVpcStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://aws-cf-templates-001.s3.amazonaws.com/vpc/client-vpc.yml
      TimeoutInMinutes: 5
      Parameters:
        ClientMnemonic: !Ref ClientMnemonic
        EnvironmentId: !Ref EnvironmentId
        VpcCidr: !Ref VpcCidr
        PrivateSubnetCidr: !Ref PrivateSubnetCidr
        PublicSubnetCidr: !Ref PublicSubnetCidr
  DomainController:
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Init: 
        config: 
          files: 
            c:\\cfn\\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            c:\\cfn\\hooks.d\\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.DomainController.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe -v -s ${AWS::StackId} -r DomainController --region ${AWS::Region}
            C:\\cfn\\RunCommand.bat:
              content: |
                %~1
                IF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )
            C:\\cfn\\Deploy-NewADDSForest.ps1: 
              content: !Sub |
                $safeModePassword = ConvertTo-SecureString "${RestoreModePassword}" -AsPlainText -Force
                $domainName = "${ClientMnemonic}.dev.cerner.com".ToLower()
                $domainNetbiosName = "${ClientMnemonic}".ToUpper()
                Install-WindowsFeature AD-Domain-Services -IncludeManagementTools
                Install-ADDSForest -DomainName $domainName -SafeModeAdministratorPassword $safeModePassword -DatabasePath "C:\\Windows\\NTDS" -DomainMode 7 `
                -DomainNetbiosName $domainNetbiosName -ForestMode 7 -InstallDns -LogPath "C:\\Windows\\NTDS" -SysvolPath "C:\\Windows\\SYSVOL" -Force
            C:\\cfn\\Create-NewDomainAdminUser.ps1:
              content: !Sub |
                $password = ConvertTo-SecureString "${DomainAdminPassword}" -AsPlainText -Force
                New-AdUser -Name ${DomainAdminUsername} -AccountPassword $password -Enabled:$true
          commands:
            1-DCPromo:
              command: C:\\cfn\\RunCommand.bat "powershell.exe -ExecutionPolicy Bypass -File C:\\cfn\\Deploy-NewADDSForest.ps1"
              waitAfterCompletion: forever
            2-AddDomainAdminUser:
              command: !Sub |
                C:\\cfn\\RunCommand.bat "powershell.exe -ExecutionPolicy Bypass -File C:\\cfn\\Create-NewDomainAdminUser.ps1"
            3-DeleteTempScriptFiles:
              command: C:\\cfn\\RunCommand.bat "powershell.exe -ExecutionPolicy Bypass -Command Remove-Item -Path C:\\cfn\\*.ps1 -Force"
            4-Signal-Success:
              command: !Join
                - ""
                - - cfn-signal.exe -e 0 "
                  - Fn::Base64: !Ref DomainControllerWaitHandle
                  - '"'
          services:
            windows:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - c:\\cfn\\cfn-hup.conf
                  - c:\\cfn\\hooks.d\\cfn-auto-reloader.conf
    Properties: 
      ImageId: !Ref AMIImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      SubnetId: !GetAtt ClientVpcStack.Outputs.PublicSubnet
      SecurityGroupIds:
        - !GetAtt ClientVpcStack.Outputs.InAllSecurityGroup
      UserData: !Base64
        Fn::Sub: |
          <script>
            cfn-init.exe -v -s ${AWS::StackId} -r DomainController --region ${AWS::Region} 
          </script>
    DependsOn:
      - ClientVpcStack
  DomainControllerWaitCondition: 
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: DomainController
    Properties:
      Handle: !Ref DomainControllerWaitHandle
      Timeout: 1500
  DomainControllerWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
Outputs:
  DomainControllerDNSName:
    Value: !GetAtt
      - DomainController
      - PublicDnsName
    Description: Public DNS name of Active Directory server for RDP connection
  DomainControllerIP:
    Value: !GetAtt 
      - DomainController
      - PrivateIp
    Description: Private IP address of Active Directory server which is also a DNS server
  DomainAdminUsername:
    Value: !Join
      - ""
      - - !Ref ClientMnemonic
        - \\
        - !Ref DomainAdminUsername
    Description: Domain administrator username
  DomainAdminPassword:
    Value: Please retrieve Administrator password of the instance
  DomainDnsName:
    Value: !Sub ${ClientMnemonic}.dev.cerner.com
    Description: Active Directory Domain DNS Name
  DomainLdapDn:
    Value: !Sub DC=${ClientMnemonic},DC=dev,DC=cerner,DC=com
    Description: Root LDAP Distinguished Name for Active Directory domain
  DomainNetbiosName:
    Value: !Ref ClientMnemonic
    Description: NetBIOS name for Active Directory domain
AWSTemplateFormatVersion: 2010-09-09